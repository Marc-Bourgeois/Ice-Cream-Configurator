<!DOCTYPE html>
<html lang="en" style="background-color: #f0f0f0;">
	<head>
		<title>Ice Cream Configurator</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
	</head>

	<body>
		<div id="info" style="background-color: #f0f0f0; color: black;">
			Ice Cream Configurator
		</div>
		
		<div id="tooltip" style="background-color: #333; opacity: 0.95; text-align: center; border-radius: 5px; position: absolute; width: auto; height: auto; min-width: 50px; padding: 3px 10px; z-index: 4; display: none; user-select: none;"></div>
		
		<div style="position: absolute; top: 0; left: 0; padding: 50px 0px 0px 5px; color: black; width: 200px; height: 300px; z-index: 1; user-select: none;">
			<b style="font-size: 15px;">CONFIGURATOR</b><br/><br/>
			<span>Contenant :</span>
			<select id="contenant">
				<option>Cornet</option>
				<option>Coupe</option>
			</select>
			<br/>
			<span>Boule de glace :</span><br/>
			<button id="add-boule">Add</button>
			<button id="remove-boule">Remove</button>
			
			<br/>
			<span>Cerise :</span><input type="checkbox" style="position: relative; top: 3px;"></input>
			
			<br/><br/>
			<b>Menu</b><br/>
			<span>Cornet (3 boules max)</span><br/>
			<span>Coupe (5 boules max)</span><br/>
			<span>Nombre de boules :</span> <span id="nb-boule">1</span>
		</div>
		
		<script type="importmap">
			{
				"imports": {
					"three": "./three.js-dev/build/three.module.js"
				}
			}
		</script>
		
		<script type="module">
			import * as THREE from 'three';

			import { OrbitControls } from './three.js-dev/jsm/controls/OrbitControls.js';
			import { TrackballControls } from './three.js-dev/jsm/controls/TrackballControls.js';
			import { GLTFLoader } from './three.js-dev/jsm/loaders/GLTFLoader.js';
			import Stats from './three.js-dev/jsm/libs/stats.module.js';
			
			
			
			var container, controls, stats;
			var camera, light, light1, light2, light3, scene, renderer;
			var clock = new THREE.Clock();
			
			var raycaster;
			var INTERSECTED;
			
			const pointer = new THREE.Vector2();
			
			var tastes = [
				{name:"Chocolat", r:0.0637 , g:0.0250 ,b:0.0157},
				{name:"Vanille", r:0.924 , g:0.945 ,b:0.52},
				{name:"CafÃ©", r:0.579 , g:0.354 ,b:0.172},
				{name:"Pistache", r:0.309 , g:0.862 ,b:0.209},
				{name:"Mangue", r:0.867 , g:0.565 ,b:0.122},
				{name:"Noix de coco", r:0.805 , g:0.899 ,b:0.978},
				{name:"Fraise", r:0.815 , g:0.124 ,b:0.232},
				{name:"Citron", r:0.802 , g:0.769 ,b:0.126},
				{name:"Citron vert", r:0.487 , g:0.976 ,b:0.100}
				];
				
			init();
			animate();

			function init() {
				
				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 1000 );
				camera.position.set( 0.0, 0.0, 4. );

				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0xf0f0f0 );
				
				light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );
				scene.add( light );
				
				/*const light = new THREE.DirectionalLight( 0xffffff, 1 );
				light.position.set( 1, 1, 1 ).normalize();
				scene.add( light );*/
				
				/*
				light1 = new THREE.PointLight(0xffffff, 1, 0 );
				light1.position.set(0.0, 0.0, 10.);
				scene.add( light1 );
				
				light2 = new THREE.PointLight(0xffffff, 1, 0 );
				light2.position.set(0.0, 0.0, -10.);
				scene.add( light2 );
				
				light3 = new THREE.PointLight(0xffffff, 1, 0 );
				light3.position.set(0.0, 10.0, 0.0);
				scene.add( light3 );
				*/
				
				const gm_table = new THREE.BoxGeometry( 3, 0.1, 3 );
				var mt_bois = new THREE.MeshPhongMaterial( {color: 0x999999} );
				var table = new THREE.Mesh( gm_table, mt_bois );
				table.position.set(0.0, -1.0, 0.0);
				scene.add( table );
				
				var gm_cornet = new THREE.ConeGeometry( .3, 1, 32 );
				gm_cornet.rotateZ( Math.PI );
				var mt_cornet = new THREE.MeshPhongMaterial( {color: 0xcc8800} );
				const gm_coupe = new THREE.BoxGeometry( 1.1, 1, 1.1 );
				var mt_coupe = new THREE.MeshPhongMaterial( {color: 0xa6ff4d} );
				var contenant = new THREE.Mesh( gm_cornet, mt_cornet );
				contenant.position.set(0.0, -0.4, 0.0);
				scene.add( contenant );
				
				var gm_boule = new THREE.SphereGeometry( 0.35, 32, 16 );
				var mt_citron = new THREE.MeshPhongMaterial( { color: 0xffff00 } );
				var mt_chocolat = new THREE.MeshPhongMaterial( { color: 0x331a00 } );
				var mt_fraise = new THREE.MeshPhongMaterial( { color: 0xff471a } );
				var mt_pistache = new THREE.MeshPhongMaterial( { color: 0x00ff80 } );
				var mt_menthe = new THREE.MeshPhongMaterial( { color: 0x66ffff } );
				
				//var boule1 = new THREE.Mesh( gm_boule, mt_citron );
				//boule1.position.set(0.0, 0.2, 0.0);
				//scene.add( boule1 );
				
				/*var boule2 = new THREE.Mesh( gm_boule, mt_chocolat );
				var boule3 = new THREE.Mesh( gm_boule, mt_fraise );
				var boule4 = new THREE.Mesh( gm_boule, mt_pistache );
				var boule5 = new THREE.Mesh( gm_boule, mt_menthe );*/
				
				var contenant_obj = new THREE.Object3D();
				var coupe = new THREE.Object3D();
				var boule1 = new THREE.Object3D();
				var boule2 = new THREE.Object3D();
				var boule3 = new THREE.Object3D();
				var boule4 = new THREE.Object3D();
				var boule5 = new THREE.Object3D();
				var cerise = new THREE.Object3D();
				
				var loader = new GLTFLoader().setPath( './assets/' );
				loader.load( 'cup.glb', function ( gltf ) {
					//gltf.scene.traverse( function ( child ) {} );
					coupe = gltf.scene;
					console.log(coupe);
					coupe.name = 'coupe';
					coupe.scale.set(0.5, 0.5, 0.5);
					coupe.position.set(0, -0.05, 0);
					} );
				//setTimeout(function () { console.log(coupe); scene.add(coupe); }, 200);
				//scene.add(coupe);
				//console.log(coupe);
				
				loader.load( 'cherry.glb', function ( gltf ) {
					cerise = gltf.scene;
					cerise.name = "Cerise";
					gltf.scene.scale.set(0.45, 0.45, 0.45);
					gltf.scene.position.set(0, 1, 0);
					scene.add( cerise );
					render();
					} );
				
					
				loader.load( 'iceCreamChoco.glb', function ( gltf ) {
					boule1 = gltf.scene;
					boule1.name = "Boule 1";
					boule1.scale.set(0.5, 0.5, 0.5);
					boule1.position.set(0.0, 0.2, 0.0);
					let taste = randomTaste();
					boule1.children[0].material.name = taste.name;
					boule1.children[0].material.color.r = taste.r;
					boule1.children[0].material.color.g = taste.g;
					boule1.children[0].material.color.b = taste.b;
					scene.add(boule1);
					render();
					} );
					
				loader.load( 'iceCreamStrawberry.glb', function ( gltf ) {
					boule2 = gltf.scene;
					boule2.name = "Boule 2";
					boule2.scale.set(0.5, 0.5, 0.5);
					boule2.position.set(0, 1, 0.5);
					let taste = randomTaste();
					boule2.children[0].material.name = taste.name;
					boule2.children[0].material.color.r = taste.r;
					boule2.children[0].material.color.g = taste.g;
					boule2.children[0].material.color.b = taste.b;
					//scene.add(boule2);
					render();
					} );
					
				loader.load( 'iceCreamVanilla.glb', function ( gltf ) {
					boule3 = gltf.scene;
					boule3.name = "Boule 3";
					boule3.scale.set(0.5, 0.5, 0.5);
					boule3.position.set(0.5, 1, 0.5);
					let taste = randomTaste();
					boule3.children[0].material.name = taste.name;
					boule3.children[0].material.color.r = taste.r;
					boule3.children[0].material.color.g = taste.g;
					boule3.children[0].material.color.b = taste.b;
					//scene.add( boule3 );
					render();
					} );
				
				loader.load( 'iceCreamChoco.glb', function ( gltf ) {
					boule4 = gltf.scene;
					boule4.name = "Boule 4";
					boule4.scale.set(0.5, 0.5, 0.5);
					boule4.position.set(0.5, 1, 0.5);
					let taste = randomTaste();
					boule4.children[0].material.name = taste.name;
					boule4.children[0].material.color.r = taste.r;
					boule4.children[0].material.color.g = taste.g;
					boule4.children[0].material.color.b = taste.b;
					//scene.add( boule4 );
					render();
					} );
					
				loader.load( 'iceCreamStrawberry.glb', function ( gltf ) {
					boule5 = gltf.scene;
					boule5.name = "Boule 5";
					boule5.scale.set(0.5, 0.5, 0.5);
					boule5.position.set(0.5, 1, 0.5);
					let taste = randomTaste();
					boule5.children[0].material.name = taste.name;
					boule5.children[0].material.color.r = taste.r;
					boule5.children[0].material.color.g = taste.g;
					boule5.children[0].material.color.b = taste.b;
					//scene.add(boule5);
					render();
					} );
					
				
				/*var boule2 = boule_chocolat;
				var boule3 = boule_fraise;
				var boule4 = boule_vanille;
				var boule5 = boule_chocolat;*/
				//setTimeout(() => {boule1.position.set(2, 2, 2);}, 500);
				//setTimeout(() => {updateBoulesPosition(select_contenant, boule1, boule2, boule3, boule4, boule5);}, 500);
				raycaster = new THREE.Raycaster();
				
				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.toneMapping = THREE.ACESFilmicToneMapping;
				renderer.toneMappingExposure = 0.8;
				renderer.outputEncoding = THREE.sRGBEncoding;
				container.appendChild( renderer.domElement );

				controls = new OrbitControls( camera, renderer.domElement );
				controls.target.set( 0, 0, 0. );
				controls.maxPolarAngle = Math.PI/2;
				controls.enablePan = false;
				//controls.addEventListener('change', render);
				//controls.minDistance = 2;
				//controls.maxDistance = 10;
				var nb_boule = 1;
				
				stats = new Stats();
				container.appendChild( stats.dom );
				
				window.addEventListener( 'resize', onWindowResize, false );
				document.addEventListener( 'mousemove', onPointerMove );
				
				document.getElementById("contenant").addEventListener("change", function () {
					var select_contenant = document.getElementById("contenant").value;
					
					if(select_contenant == "Coupe") {
						contenant.material = mt_coupe;
						contenant.geometry = gm_coupe;
					}
					else {
						contenant.material = mt_cornet;
						contenant.geometry = gm_cornet;
						scene.remove(boule4);
						scene.remove(boule5);
						if(nb_boule > 3)
							nb_boule = 3;
						document.getElementById("nb-boule").innerHTML = nb_boule;
					}
					updateBoulesPosition(select_contenant, boule1, boule2, boule3, boule4, boule5);
				} );
				
				document.getElementById("add-boule").addEventListener("click", function () {
					var select_contenant = document.getElementById("contenant").value;
					if(select_contenant == "Cornet") {
						if(nb_boule == 3) return;
					}
					else { // Coupe
						if(nb_boule == 5) return;
					}
					
					if(nb_boule == 1)
						scene.add(boule2);
					if(nb_boule == 2)
						scene.add(boule3);
					if(nb_boule == 3)
						scene.add(boule4);	
					if(nb_boule == 4)
						scene.add(boule5);
						
					nb_boule++;
					document.getElementById("nb-boule").innerHTML = nb_boule;
					updateBoulesPosition(select_contenant, boule1, boule2, boule3, boule4, boule5);
				} );
				
				// CLICK
				document.getElementsByTagName("CANVAS")[0].addEventListener("mousedown", function() {
					if(!(event.which === 1 || event.button === 0 || event.which === 3 || event.button == 2)) return; // not left or right click
					
					let mouse = new THREE.Vector2();
					mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
					mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

					raycaster.setFromCamera(mouse, camera);
					
					const intersects = raycaster.intersectObjects(getAllObjectsFromScene());

					var isIntersected = false;
					if(intersects[0] != undefined && intersects[0].object.parent.type === "Group") isIntersected = true;

					if (isIntersected) {
						document.getElementById("tooltip").style.display = "inline-block";
						document.getElementById("tooltip").style.left = event.clientX+50+"px"; 
						document.getElementById("tooltip").style.top = event.clientY-25+"px";
						if(intersects[0].object.parent.parent.type == "Group")
							document.getElementById("tooltip").innerHTML = intersects[0].object.parent.parent.name; // cerise
						else {
							document.getElementById("tooltip").innerHTML = "<b>" + intersects[0].object.parent.name + "</b>"; // boules
							
							// Change taste
							for(let i = 0; i < tastes.length; i++) {
								if(tastes[i].name == intersects[0].object.material.name) {
									if (event.which === 1 || event.button === 0) { // left click
										let index = (i-1)%tastes.length;
										if(index < 0) index = tastes.length-1;
										var next_taste = tastes[index];
									}
									else if (event.which === 3 || event.button === 2) { // right click
										var next_taste = tastes[(i+1)%tastes.length];
									}
								}
							}
							document.getElementById("tooltip").innerHTML += "<br/>< " + next_taste.name + " >";
							intersects[0].object.material.name = next_taste.name;
							intersects[0].object.material.color.r = next_taste.r;
							intersects[0].object.material.color.g = next_taste.g;
							intersects[0].object.material.color.b = next_taste.b;
							
						}
					}
					else {
						document.getElementById("tooltip").style.display = "none";
					}
			  
					
				});
				
				// MOVE
				document.getElementsByTagName("CANVAS")[0].addEventListener("mousemove", function() {
					let mouse = new THREE.Vector2();
					mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
					mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

					raycaster.setFromCamera(mouse, camera);
					
					const intersects = raycaster.intersectObjects(getAllObjectsFromScene());

					var isIntersected = false;
					if(intersects[0] != undefined && intersects[0].object.parent.type === "Group") isIntersected = true;

					if (isIntersected) {
						document.getElementById("tooltip").style.display = "inline-block";
						document.getElementById("tooltip").style.left = event.clientX+50+"px"; 
						document.getElementById("tooltip").style.top = event.clientY-25+"px";
						if(intersects[0].object.parent.parent.type == "Group")
							document.getElementById("tooltip").innerHTML = intersects[0].object.parent.parent.name; // cerise
						else {
							document.getElementById("tooltip").innerHTML = "<b>" + intersects[0].object.parent.name + "</b>"; // boules
							document.getElementById("tooltip").innerHTML += "<br/>< " + intersects[0].object.material.name + " >";
						}
					}
					else {
						document.getElementById("tooltip").style.display = "none";
					}
			  
					
				});
				
			}
			
			function onPointerMove( event ) {
				pointer.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				pointer.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
			}
			
			function getAllObjectsFromScene() {
				var objects = scene.children;
				var ob = [];
				var current;
				for(let i = 0; i < objects.length; i++) {
					current = objects[i];
					while(current.type == "Group") {
						current = current.children[0];
					}
					if(current.type == "Mesh") {
						ob.push(current);
					}
					
				}
				return ob;
			}
			
			function randomTaste() {
				var taste = tastes[Math.floor(Math.random() * tastes.length)];
				return taste;
			}
			
			function updateBoulesPosition(type_contenant, boule1, boule2, boule3, boule4, boule5) {
				console.log("update_pos");
				if(type_contenant == "Cornet") {
					boule1.position.set(0.0, 0.2, 0.0);
					boule2.position.set(0.0, 0.5, 0.0);
					boule3.position.set(0.0, 0.8, 0.0);
				}
				else if(type_contenant == "Coupe") {
					boule1.position.set(0.23, 0.2, -0.23);
					boule2.position.set(-0.23, 0.2, 0.23);
					boule3.position.set(-0.23, 0.2, -0.23);
					boule4.position.set(0.23, 0.2, 0.23);
					boule5.position.set(0.0, 0.5, 0.0);
				}
			}
			
			function getRandomFloat(min, max, decimals) {
				const str = (Math.random() * (max - min) + min).toFixed(decimals);

				return parseFloat(str);
			}

			function animate() {
				requestAnimationFrame(animate);    
				scene.rotation.y += 0.1 * Math.PI/180;
				controls.update();
				stats.update();
				render();
			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
				//controls.handleResize();
				render();

			}
			
			function render() {
				// find intersections
				
				var objects = scene.children;
				var ob = [];
				var current;
				for(let i = 0; i < objects.length; i++) {
					current = objects[i];
					while(current.type == "Group") {
						current = current.children[0];
					}
					if(current.type == "Mesh") {
						ob.push(current);
					}
					
				}
				
				raycaster.setFromCamera( pointer, camera );
				const intersects = raycaster.intersectObjects( [...ob], false );
				
				if ( intersects.length > 0 ) {
					
					if ( INTERSECTED != intersects[ 0 ].object ) {
						
						console.log(ob);
						//console.log(intersects[0].object);
						//intersects[0].object.material.emissive = "0xff0000";
						if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );
						
						INTERSECTED = intersects[ 0 ].object;
						
						
						
						INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();
						INTERSECTED.material.emissive.setHex( 0xff0000 );
						document.getElementsByTagName("CANVAS")[0].style.cursor = "pointer";
						
						/*if(intersects[0].object.parent.name == "boule1") {
							document.getElementById("tooltip").style.display = "inline-block";
							document.getElementById("tooltip").style.left = event.clientX+50+"px"; 
							document.getElementById("tooltip").style.top = event.clientY-25+"px";
							if(intersects[0].object.parent.parent.type == "Group")
							else {
								document.getElementById("tooltip").innerHTML = intersects[0].object.parent.name; // boules
							}
						}*/

					}

				} else {
					if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );

					INTERSECTED = null;
					document.getElementsByTagName("CANVAS")[0].style.cursor = "";
				}

				renderer.render( scene, camera );
			}

		</script>

	</body>
</html>
